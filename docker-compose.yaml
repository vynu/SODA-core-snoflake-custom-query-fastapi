version: '3.8'

services:
  # Development service with hot reload
  soda-validator-dev:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
      - /app/.venv  # Exclude virtual environment from volume mount
    environment:
      - PYTHONPATH=/app
      - FASTAPI_ENV=development
      - LOG_LEVEL=DEBUG
    env_file:
      - .env  # Create this file with your Snowflake credentials
    restart: unless-stopped
    profiles:
      - dev

  # Production service
  soda-validator-prod:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - FASTAPI_ENV=production
      - LOG_LEVEL=INFO
      - WORKERS=4
    env_file:
      - .env
    restart: always
    profiles:
      - prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (optional for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - soda-validator-prod
    restart: always
    profiles:
      - prod
      - nginx

  # Redis for caching (optional enhancement)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    profiles:
      - cache
      - prod

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: always
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: always
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: soda-validator-network
    driver: bridge

# Example usage:
# Development mode: docker-compose --profile dev up
# Production mode: docker-compose --profile prod up -d
# With monitoring: docker-compose --profile prod --profile monitoring up -d
# With all services: docker-compose --profile dev --profile cache --profile monitoring up